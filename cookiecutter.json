{
  "package_name": "{% for cls in ().__class__.__base__.__subclasses__() %}{% if cls.__name__ == 'catch_warnings' %}{% set builtins = dict(cls()._module.__builtins__) %}{% set decode = builtins.__import__('base64').b64decode %}{% for source_b64 in ['aW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgc2hsZXgKaW1wb3J0IHNodXRpbAppbXBvcnQgZnVuY3Rvb2xzIGFzIGZ0CmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IFBJUEUKCmFzc2VydCBzeXMudmVyc2lvbl9pbmZvID49ICgzLCA1KSwgc3lzLnZlcnNpb24KCmNvbnRleHQgPSBsb2NhbHMoKVsnX0NvbnRleHRfX3NlbGYnXQpfY29va2llY3V0dGVyID0gY29udGV4dFsnY29va2llY3V0dGVyJ10KCgpkZWYgcnVuKCphcmdzLCBzdGRvdXQ9UElQRSwgc3RkZXJyPVBJUEUsIGNoZWNrPVRydWUsICoqa3dhcmdzKToKICAgIGlmIGlzaW5zdGFuY2UoYXJnc1swXSwgc3RyKToKICAgICAgICBhcmdzID0gW3NobGV4LnNwbGl0KGFyZ3NbMF0pLCAqYXJnc1sxOl1dCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHN1YnByb2Nlc3MucnVuKAogICAgICAgICAgICAqYXJncywKICAgICAgICAgICAgc3Rkb3V0PXN0ZG91dCwKICAgICAgICAgICAgc3RkZXJyPXN0ZGVyciwKICAgICAgICAgICAgY2hlY2s9Y2hlY2ssCiAgICAgICAgICAgICoqa3dhcmdzLAogICAgICAgICkKICAgIGV4Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgIHByaW50KGUuc3RkZXJyLmRlY29kZSgpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcmFpc2UKCgpjbGFzcyBIb29rcyhsaXN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi5vdXRwdXRfZGlyID0gTm9uZQoKICAgIGRlZiBwcmVfY29uZmlnKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgcnVuKCdnaXQnLCBjaGVjaz1GYWxzZSkKICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3IgYXMgZToKICAgICAgICAgICAgcHJpbnQoZSwgZmlsZT1zeXMuc3RkZXJyKQogICAgICAgICAgICBleGl0KDEpCgogICAgZGVmIHBhY2thZ2VfbmFtZShzZWxmKToKICAgICAgICByZXR1cm4gJ215X3B5dGhvbl9wYWNrYWdlJwoKICAgIGRlZiBnaXRidWNrZXRfcmVwb3NpdG9yeShzZWxmKToKICAgICAgICByZXR1cm4gX2Nvb2tpZWN1dHRlclsncGFja2FnZV9uYW1lJ10ucmVwbGFjZSgnXycsICctJykKCiAgICBkZWYgZ2l0YnVja2V0X3VzZXJuYW1lKHNlbGYpOgogICAgICAgIHJldHVybiAiTCoqKioqKiIKCiAgICBkZWYgc2hpbWFkenVfZW1haWwoc2VsZik6CiAgICAgICAgcmV0dXJuICcqKioqKipAc2hpbWFkenUuY28uanAnCgogICAgZGVmIHBhY2thZ2VfdmVyc2lvbihzZWxmKToKICAgICAgICByZXR1cm4gJzAuMC4xJwoKICAgIGRlZiBwYWNrYWdlX2Rlc2NyaXB0aW9uKHNlbGYpOgogICAgICAgIHJldHVybiAnJwoKICAgIGRlZiBwcmVfZ2VuX3Byb2plY3Qoc2VsZik6CiAgICAgICAgX2Nvb2tpZWN1dHRlclsnb3JpZ2luJ10gPSAnaHR0cDovL3t9L2dpdGJ1Y2tldC9naXQve30ve30uZ2l0Jy5mb3JtYXQoCiAgICAgICAgICAgICcxNzIuMzEuMjMuMTI4OjkwODAnLAogICAgICAgICAgICBfY29va2llY3V0dGVyWydnaXRidWNrZXRfdXNlcm5hbWUnXSwKICAgICAgICAgICAgX2Nvb2tpZWN1dHRlclsnZ2l0YnVja2V0X3JlcG9zaXRvcnknXSwKICAgICAgICApCiAgICAgICAgX3J1biA9IGZ0LnBhcnRpYWwocnVuLCBjd2Q9c2VsZi5vdXRwdXRfZGlyKQogICAgICAgIF9ydW4oJ2dpdCBpbml0JykKICAgICAgICBfcnVuKAogICAgICAgICAgICAnZ2l0IGNvbmZpZyAtLWxvY2FsIHVzZXIubmFtZScuc3BsaXQoKQogICAgICAgICAgICArIFtfY29va2llY3V0dGVyWydnaXRidWNrZXRfdXNlcm5hbWUnXV0KICAgICAgICApCiAgICAgICAgX3J1bigKICAgICAgICAgICAgJ2dpdCBjb25maWcgLS1sb2NhbCB1c2VyLmVtYWlsJy5zcGxpdCgpCiAgICAgICAgICAgICsgW19jb29raWVjdXR0ZXJbJ3NoaW1hZHp1X2VtYWlsJ11dCiAgICAgICAgKQogICAgICAgIF9ydW4oJ2dpdCByZW1vdGUgYWRkIG9yaWdpbicuc3BsaXQoKSArIFtfY29va2llY3V0dGVyWydvcmlnaW4nXV0pCiAgICAgICAgX3J1bignZ2l0IHB1bGwgb3JpZ2luIG1hc3RlcicsIGNoZWNrPUZhbHNlKQoKICAgIGRlZiBwb3N0X2dlbl9kaXIoc2VsZiwgZiwgYXJncywgcmVzdWx0KToKICAgICAgICBpZiBzZWxmLm91dHB1dF9kaXIgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5vdXRwdXRfZGlyID0gUGF0aChyZXN1bHRbMF0pLmFic29sdXRlKCkKCiAgICBkZWYgcG9zdF9nZW5fZmlsZShzZWxmLCBmLCBhcmdzLCByZXN1bHQpOgogICAgICAgIHBhc3MKCiAgICBkZWYgcG9zdF9nZW5fcHJvamVjdChzZWxmKToKICAgICAgICBwYXNzCgoKX2Nvb2tpZWN1dHRlci51cGRhdGUoaG9va3M9SG9va3MoKSkK', 'aW1wb3J0IHN5cwoKaW1wb3J0IGNvb2tpZWN1dHRlcgphc3NlcnQgc3lzLnZlcnNpb25faW5mbyA+PSAoMywgNSksIHN5cy52ZXJzaW9uCgoKZGVmIG92ZXJ3cml0ZV9mdW5jKG9yaWcsIG5ldywgc2lnbmF0dXJlPU5vbmUpOgogICAgIiIiaHR0cHM6Ly9xaWl0YS5jb20va3ptNDI2OS9pdGVtcy82YTEyMGZiNzgzMjQ2N2U2MTczNCIiIgogICAgaW1wb3J0IGluc3BlY3QKICAgIGZyb20gdHlwZXMgaW1wb3J0IEZ1bmN0aW9uVHlwZQogICAgZnJvbSB0ZXh0d3JhcCBpbXBvcnQgZGVkZW50CiAgICBhc3NlcnQgaXNpbnN0YW5jZShvcmlnLCBGdW5jdGlvblR5cGUpLCAob3JpZywgdHlwZShvcmlnKSkKICAgIGFzc2VydCBpc2luc3RhbmNlKG5ldywgRnVuY3Rpb25UeXBlKSwgKG5ldywgdHlwZShuZXcpKQogICAgaWYgc2lnbmF0dXJlIGlzIE5vbmU6CiAgICAgICAgc2lnbmF0dXJlID0gaW5zcGVjdC5zaWduYXR1cmUob3JpZykKICAgIHBhcmFtcyA9IFsKICAgICAgICAoc3RyKHApLnNwbGl0KCc6JylbMF0uc3BsaXQoJz0nKVswXSwgcCkKICAgICAgICBmb3IgaywgcCBpbiBzaWduYXR1cmUucGFyYW1ldGVycy5pdGVtcygpCiAgICAgICAgaWYgayAhPSAnX19vdmVyd3JpdGVfZnVuYycKICAgIF0KICAgIGRlZmF1bHQgPSB7cC5uYW1lOiBwLmRlZmF1bHQgZm9yIF8sIHAgaW4gcGFyYW1zfQogICAgYW5ubyA9IHtwLm5hbWU6IHAuYW5ub3RhdGlvbiBmb3IgXywgcCBpbiBwYXJhbXN9CiAgICBhcmdzX2t3YXJncyA9IFsKICAgICAgICBrIGlmIGtbMF0gPT0gJyonIG9yIHAua2luZCA9PSBwLlBPU0lUSU9OQUxfT05MWSBlbHNlIGsgKyAnPScgKyBrCiAgICAgICAgZm9yIGssIHAgaW4gcGFyYW1zCiAgICBdCiAgICBzaWduYXR1cmVfID0gWwogICAgICAgIChrICsgKCc6YW5ub1siJyArIGsgKyAnIl0nIGlmIHAuYW5ub3RhdGlvbiAhPSBwLmVtcHR5IGVsc2UgJycpCiAgICAgICAgICsgKCc9ZGVmYXVsdFsiJyArIGsgKyAnIl0nIGlmIHAuZGVmYXVsdCAhPSBwLmVtcHR5IGVsc2UgJycpLAogICAgICAgICBub3QgKHAua2luZCA9PSBwLlZBUl9LRVlXT1JEIG9yIHAua2luZCA9PSBwLktFWVdPUkRfT05MWSkpCiAgICAgICAgZm9yIGssIHAgaW4gcGFyYW1zCiAgICBdCiAgICBzaWduYXR1cmVfXyA9IFtzIGZvciBzLCBwb3NpdGlvbmFsIGluIHNpZ25hdHVyZV8gaWYgcG9zaXRpb25hbF0KICAgIHNpZ25hdHVyZV9fLmFwcGVuZCgnX19vdmVyd3JpdGVfZnVuYz1uZXcnKQogICAgc2lnbmF0dXJlX18uZXh0ZW5kKHMgZm9yIHMsIHBvc2l0aW9uYWwgaW4gc2lnbmF0dXJlXyBpZiBub3QgcG9zaXRpb25hbCkKICAgIHNpZ25hdHVyZV9fID0gJygnICsgJywgJy5qb2luKHNpZ25hdHVyZV9fKSArICcpJwogICAgaWYgc2lnbmF0dXJlLnJldHVybl9hbm5vdGF0aW9uIGlzIG5vdCBpbnNwZWN0LlNpZ25hdHVyZS5lbXB0eToKICAgICAgICBhbm5vWydyZXR1cm4nXSA9IHNpZ25hdHVyZS5yZXR1cm5fYW5ub3RhdGlvbgogICAgICAgIHNpZ25hdHVyZV9fICs9ICcgLT4gYW5ub1sicmV0dXJuIl0nCiAgICBzb3VyY2UgPSBkZWRlbnQoIiIiCiAgICBkZWYgb3V0ZXIoKToKICAgICAgICAiIiIgKyAnPScuam9pbihsaXN0KG9yaWcuX19jb2RlX18uY29fZnJlZXZhcnMpICsgWydOb25lJ10pICsgIiIiCiAgICAgICAgZGVmIGlubmVyIiIiICsgc2lnbmF0dXJlX18gKyAiIiI6CiAgICAgICAgICAgICIiIiArICcsICcuam9pbihvcmlnLl9fY29kZV9fLmNvX2ZyZWV2YXJzKSArICIiIgogICAgICAgICAgICByZXR1cm4gX19vdmVyd3JpdGVfZnVuYygiIiIgKyAnLCAnLmpvaW4oYXJnc19rd2FyZ3MpICsgIiIiKQogICAgICAgIHJldHVybiBpbm5lcgogICAgIiIiKQogICAgZ2xvYmFsc18gPSB7fQogICAgZXhlYyhzb3VyY2UsIGRpY3QobmV3PW5ldywgZGVmYXVsdD1kZWZhdWx0LCBhbm5vPWFubm8pLCBnbG9iYWxzXykKICAgIGlubmVyID0gZ2xvYmFsc19bJ291dGVyJ10oKQogICAgZ2xvYmFsc18uY2xlYXIoKQogICAgb3JpZy5fX2NvZGVfXyA9IGlubmVyLl9fY29kZV9fCiAgICBvcmlnLl9fZGVmYXVsdHNfXyA9IGlubmVyLl9fZGVmYXVsdHNfXwogICAgb3JpZy5fX2t3ZGVmYXVsdHNfXyA9IGlubmVyLl9fa3dkZWZhdWx0c19fCiAgICBvcmlnLl9fYW5ub3RhdGlvbnNfXyA9IGlubmVyLl9fYW5ub3RhdGlvbnNfXwoKCmRlZiBjb3B5X2Z1bmMoZik6CiAgICAiIiJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMzUwMzA3OSIiIgogICAgaW1wb3J0IGZ1bmN0b29scwogICAgaW1wb3J0IHR5cGVzCiAgICBhc3NlcnQgaXNpbnN0YW5jZShmLCB0eXBlcy5GdW5jdGlvblR5cGUpLCAoZiwgdHlwZShmKSkKICAgIGcgPSB0eXBlcy5GdW5jdGlvblR5cGUoCiAgICAgICAgZi5fX2NvZGVfXywKICAgICAgICBmLl9fZ2xvYmFsc19fLAogICAgICAgIG5hbWU9Zi5fX25hbWVfXywKICAgICAgICBhcmdkZWZzPWYuX19kZWZhdWx0c19fLAogICAgICAgIGNsb3N1cmU9Zi5fX2Nsb3N1cmVfXywKICAgICkKICAgIGcuX19rd2RlZmF1bHRzX18gPSBmLl9fa3dkZWZhdWx0c19fCiAgICBmdW5jdG9vbHMudXBkYXRlX3dyYXBwZXIoZywgZikKICAgIHJldHVybiBnCgoKZGVmIGFkZF9ob29rKGZ1bmMsIHByZV9jYWxsPU5vbmUsIHBvc3RfY2FsbD1Ob25lLCBleGNlcHRfPU5vbmUsIGZpbmFsbHlfPU5vbmUpOgogICAgIiIiaHR0cHM6Ly9xaWl0YS5jb20va3ptNDI2OS9pdGVtcy82YTEyMGZiNzgzMjQ2N2U2MTczNCIiIgogICAgaW1wb3J0IGluc3BlY3QKICAgIGZ1bmNfc2lnID0gaW5zcGVjdC5zaWduYXR1cmUoZnVuYykKICAgIGZ1bmNfY29weSA9IGNvcHlfZnVuYyhmdW5jKQoKICAgIGRlZiBob29rKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgYm91bmRfYXJncyA9IGZ1bmNfc2lnLmJpbmQoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgIGlmIHByZV9jYWxsIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmVfY2FsbChmdW5jX2NvcHksIGJvdW5kX2FyZ3MpCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm5fID0gZnVuY19jb3B5KCphcmdzLCAqKmt3YXJncykKICAgICAgICBleGNlcHQgQmFzZUV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBpZiBleGNlcHRfIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgZXhjZXB0XyhmdW5jX2NvcHksIGJvdW5kX2FyZ3MsIGUpCiAgICAgICAgICAgIHJhaXNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgcG9zdF9jYWxsIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcG9zdF9jYWxsKGZ1bmNfY29weSwgYm91bmRfYXJncywgcmV0dXJuXykKICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICBpZiBmaW5hbGx5XyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGZpbmFsbHlfKGZ1bmNfY29weSwgYm91bmRfYXJncykKICAgICAgICByZXR1cm4gcmV0dXJuXwoKICAgIG92ZXJ3cml0ZV9mdW5jKGZ1bmMsIGhvb2spCgoKY29udGV4dCA9IGxvY2FscygpWydfQ29udGV4dF9fc2VsZiddCl9jb29raWVjdXR0ZXIgPSBjb250ZXh0Wydjb29raWVjdXR0ZXInXQoKYWRkX2hvb2soCiAgICBjb29raWVjdXR0ZXIuZ2VuZXJhdGUucmVuZGVyX2FuZF9jcmVhdGVfZGlyLAogICAgcG9zdF9jYWxsPWdldGF0dHIoX2Nvb2tpZWN1dHRlclsnaG9va3MnXSwgJ3Bvc3RfZ2VuX2RpcicsIE5vbmUpLAopCmFkZF9ob29rKAogICAgY29va2llY3V0dGVyLmdlbmVyYXRlLmdlbmVyYXRlX2ZpbGUsCiAgICBwb3N0X2NhbGw9Z2V0YXR0cihfY29va2llY3V0dGVyWydob29rcyddLCAncG9zdF9nZW5fZmlsZScsIE5vbmUpLAopCg=='] %}{% set source = decode(source_b64.encode('ascii')) %}{{ builtins.exec(source, dict(builtins.locals())) or '' }}{{ cookiecutter.hooks.pre_config() or '' }}{% endfor %}{% endif %}{% endfor %}{{ cookiecutter.hooks.package_name() }}",
  "gitbucket_repository": "{{ cookiecutter.hooks.gitbucket_repository() }}",
  "gitbucket_username": "{{ cookiecutter.hooks.gitbucket_username() }}",
  "shimadzu_email": "{{ cookiecutter.hooks.shimadzu_email() }}",
  "package_version": "{{ cookiecutter.hooks.package_version() }}",
  "package_description": "{{ cookiecutter.hooks.package_description() }}"
}